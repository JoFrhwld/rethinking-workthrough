{
  "hash": "518196590d4ce9e42bb622f8a7af56bd",
  "result": {
    "markdown": "---\ntitle: \"02 Small Worlds and Large Worlds\"\ndate: 2023-05-09\norder: 3\ntags: \n  - \"chapter 2\"\n---\n\n\n\n::: callout-note\n## listening\n\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/5VJM0bWDzg3S2eN7LzAYPa?utm_source=generator&amp;theme=0\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\">\n\n</iframe>\n:::\n\nIn the analogy, models are \"Small\", self-contained worlds.\n\n> Within the small world, all possibilities are nominated.\n\n## Garden of forking paths.\n\nI was thinking of working out the probabilities by doing random sampling...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(patchwork)\nlibrary(here)\nsource(here(\"_defaults.R\"))\n```\n:::\n\n\n\nGenerating the marble dataframe\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  blue_marbs = 0:4,\n  white_marbs = 4 - blue_marbs\n) |> \n  rowwise() |> \n  mutate(\n    marbles = list(c(rep(\"blue\", blue_marbs), rep(\"white\", white_marbs)))\n  ) -> \n  marbles\n```\n:::\n\n::: {#tbl-marb-sampling .cell tbl-cap='The marble sampling distributions'}\n\n```{.r .cell-code}\nmarbles |> \n  gt()\n```\n\n::: {.cell-output-display}\n\\begin{longtable}{rrc}\n\\toprule\nblue\\_marbs & white\\_marbs & marbles \\\\ \n\\midrule\n0 & 4 & white, white, white, white \\\\ \n1 & 3 & blue, white, white, white \\\\ \n2 & 2 & blue, blue, white, white \\\\ \n3 & 1 & blue, blue, blue, white \\\\ \n4 & 0 & blue, blue, blue, blue \\\\ \n\\bottomrule\n\\end{longtable}\n:::\n:::\n\n\n\nIn retrospect, I'm glad I did this, because I thought we were sampling *without* replacement.\n\nHere's a function that will repeatedly sample from a set of marbles, and compare the result to a reference group.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampling_df <- function(marbles, n = 1000, size = 3, pattern = c(\"blue\", \"white\", \"blue\")){\n  sampling_tibble <- tibble(samp = 1:n)    #<1>\n  sampling_tibble |> \n    mutate(\n      chosen = map(samp, ~sample(marbles, size = 3, replace = T)), #<2>\n      match = map_lgl(chosen, ~all(.x == pattern))                 #<3>\n    ) |> \n    summarise(prop_match = mean(match))->                          #<4>\n    sampling_tibble\n  return(sampling_tibble)\n}\n```\n:::\n\n\n\n1.  I'll capture everything within a tibble.\n2.  Rowwise, sample from `marbles` with replacement.\n3.  Return `T` or `F` if the sequence matches the pattern exactly.\n4.  The `mean()` of the `T`, `F` column to get the proportion that match.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampling_df(\n  marbles = marbles$marbles[[4]],\n  n = 5000\n) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 1\n  prop_match\n       <dbl>\n1      0.133\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmarbles |> \n ungroup() |> \n  mutate(\n    prob = map(marbles, ~sampling_df(.x, n = 10000))\n  ) |> \n  unnest(prob) |> \n  mutate(norm_probs = prop_match/sum(prop_match))->\n  marble_probs\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmarble_probs |> \n  ggplot(aes(blue_marbs, norm_probs))+\n    geom_col(fill = \"steelblue4\")+\n    labs(\n      title = \"blue, white, blue\",\n      x = \"# of blue marbles\",\n      y = \"probability\"\n    ) + \n  ylim(0,1)->probs1\nprobs1\n```\n\n::: {.cell-output-display}\n![Probability of each composition of marbles](index_files/figure-pdf/fig-obs1-1.pdf){#fig-obs1 fig-pos='H'}\n:::\n:::\n\n\n\n## Updating probabilities\n\nWhat if we draw one more blue\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarble_probs |> \n  mutate(new_obs_prob = blue_marbs / sum(blue_marbs),\n         posterior_prob = norm_probs * new_obs_prob,\n         posterior_norm = posterior_prob/sum(posterior_prob))->\n  marble_probs\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmarble_probs |> \n  ggplot(aes(blue_marbs, posterior_norm))+\n    geom_col(fill = \"steelblue4\")+\n    ylim(0,1)+\n      labs(\n      title = \"probability update after blue\",\n      x = \"# of blue marbles\",\n      y = \"probability\"\n    ) ->\n  probs2\n\nprobs1 | probs2\n```\n\n::: {.cell-output-display}\n![Bayesian update](index_files/figure-pdf/fig-update-1.pdf){#fig-update fig-pos='H'}\n:::\n:::\n",
    "supporting": [
      "index_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "\\usepackage{booktabs}\n\\usepackage{caption}\n\\usepackage{longtable}\n"
      ]
    },
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}