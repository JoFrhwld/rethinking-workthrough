{
  "hash": "006ac3646a8e1e8f46d3047b746c7c8a",
  "result": {
    "markdown": "---\ntitle: \"Garden of Forking paths part 2\"\norder: 04\ndate: 2023-05-10\nformat: \n  pdf: default\n---\n\n\n::: callout-note\n## Listening\n\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/6aIJ5Tc5BtiPSQc6Ago1Y6?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\">\n\n</iframe>\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(patchwork)\nlibrary(here)\nsource(here(\"_defaults.R\"))\n```\n:::\n\n\n## A nicer table version.\n\nI'd like to re-represent the Bayesian Update in a nicer GT table. Some options are\n\n1.  Plotting extensions from `{gtExtras}`\n2.  Emojis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::install(\"gtExtras\")\nrenv::install(\"svglite\")\nrenv::install(\"emoji\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gtExtras)\nlibrary(emoji)\n```\n:::\n\n\nFirst, trying the \"win/losses\" column plot from `{gtExtra}` to illustrate the blue vs white marbles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  blue_marbs = 0:4,\n  white_marbs = 4 - blue_marbs\n) |> \n  rowwise() |> \n  mutate(\n    marbles = list(c(rep(1, blue_marbs), \n                     rep(0, white_marbs)))\n  ) -> \n  marbles_wl\n```\n:::\n\n\nThe cell background will have to be off-white for the white ticks to show\n\n\n::: {#tbl-marble-wl .cell tbl-cap='Representing marble compositions with \\'win-loss\\' plots'}\n\n```{.r .cell-code}\nmarbles_wl |> \n  gt() |> \n  gt_plt_winloss(marbles, palette = c(\"blue\", \"white\", \"grey\")) |> \n  tab_style(style = cell_fill(color = \"antiquewhite\"), \n            locations = cells_body())\n```\n\n::: {.cell-output-display}\n\\begin{longtable}{rrc}\n\\toprule\nblue\\_marbs & white\\_marbs & marbles \\\\ \n\\midrule\n0 & 4 & <?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='58.06pt' height='10.80pt' viewBox='0 0 58.06 10.80'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHw1OC4wNnwwLjAwfDEwLjgw'>    <rect x='0.00' y='0.00' width='58.06' height='10.80' />  </clipPath></defs><g clip-path='url(#cpMC4wMHw1OC4wNnwwLjAwfDEwLjgw)'><line x1='4.19' y1='8.91' x2='4.19' y2='4.70' style='stroke-width: 2.13; stroke: #FFFFFF;' /><line x1='7.30' y1='8.91' x2='7.30' y2='4.70' style='stroke-width: 2.13; stroke: #FFFFFF;' /><line x1='10.40' y1='8.91' x2='10.40' y2='4.70' style='stroke-width: 2.13; stroke: #FFFFFF;' /><line x1='13.51' y1='8.91' x2='13.51' y2='4.70' style='stroke-width: 2.13; stroke: #FFFFFF;' /></g></svg> \\\\ \n1 & 3 & <?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='58.06pt' height='10.80pt' viewBox='0 0 58.06 10.80'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHw1OC4wNnwwLjAwfDEwLjgw'>    <rect x='0.00' y='0.00' width='58.06' height='10.80' />  </clipPath></defs><g clip-path='url(#cpMC4wMHw1OC4wNnwwLjAwfDEwLjgw)'><line x1='4.19' y1='1.89' x2='4.19' y2='6.10' style='stroke-width: 2.13; stroke: #0000FF;' /><line x1='7.30' y1='8.91' x2='7.30' y2='4.70' style='stroke-width: 2.13; stroke: #FFFFFF;' /><line x1='10.40' y1='8.91' x2='10.40' y2='4.70' style='stroke-width: 2.13; stroke: #FFFFFF;' /><line x1='13.51' y1='8.91' x2='13.51' y2='4.70' style='stroke-width: 2.13; stroke: #FFFFFF;' /></g></svg> \\\\ \n2 & 2 & <?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='58.06pt' height='10.80pt' viewBox='0 0 58.06 10.80'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHw1OC4wNnwwLjAwfDEwLjgw'>    <rect x='0.00' y='0.00' width='58.06' height='10.80' />  </clipPath></defs><g clip-path='url(#cpMC4wMHw1OC4wNnwwLjAwfDEwLjgw)'><line x1='4.19' y1='1.89' x2='4.19' y2='6.10' style='stroke-width: 2.13; stroke: #0000FF;' /><line x1='7.30' y1='1.89' x2='7.30' y2='6.10' style='stroke-width: 2.13; stroke: #0000FF;' /><line x1='10.40' y1='8.91' x2='10.40' y2='4.70' style='stroke-width: 2.13; stroke: #FFFFFF;' /><line x1='13.51' y1='8.91' x2='13.51' y2='4.70' style='stroke-width: 2.13; stroke: #FFFFFF;' /></g></svg> \\\\ \n3 & 1 & <?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='58.06pt' height='10.80pt' viewBox='0 0 58.06 10.80'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHw1OC4wNnwwLjAwfDEwLjgw'>    <rect x='0.00' y='0.00' width='58.06' height='10.80' />  </clipPath></defs><g clip-path='url(#cpMC4wMHw1OC4wNnwwLjAwfDEwLjgw)'><line x1='4.19' y1='1.89' x2='4.19' y2='6.10' style='stroke-width: 2.13; stroke: #0000FF;' /><line x1='7.30' y1='1.89' x2='7.30' y2='6.10' style='stroke-width: 2.13; stroke: #0000FF;' /><line x1='10.40' y1='1.89' x2='10.40' y2='6.10' style='stroke-width: 2.13; stroke: #0000FF;' /><line x1='13.51' y1='8.91' x2='13.51' y2='4.70' style='stroke-width: 2.13; stroke: #FFFFFF;' /></g></svg> \\\\ \n4 & 0 & <?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='58.06pt' height='10.80pt' viewBox='0 0 58.06 10.80'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHw1OC4wNnwwLjAwfDEwLjgw'>    <rect x='0.00' y='0.00' width='58.06' height='10.80' />  </clipPath></defs><g clip-path='url(#cpMC4wMHw1OC4wNnwwLjAwfDEwLjgw)'><line x1='4.19' y1='1.89' x2='4.19' y2='6.10' style='stroke-width: 2.13; stroke: #0000FF;' /><line x1='7.30' y1='1.89' x2='7.30' y2='6.10' style='stroke-width: 2.13; stroke: #0000FF;' /><line x1='10.40' y1='1.89' x2='10.40' y2='6.10' style='stroke-width: 2.13; stroke: #0000FF;' /><line x1='13.51' y1='1.89' x2='13.51' y2='6.10' style='stroke-width: 2.13; stroke: #0000FF;' /></g></svg> \\\\ \n\\bottomrule\n\\end{longtable}\n:::\n:::\n\n\nI'm not overwhelmed by the result. I'll try emojis instead.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Getting the blue circle emoji\nblue_marb <- emojis |> \n  filter(str_detect(name, \"blue\"), \n         str_detect(name, \"circle\")) |> \n  pull(emoji)\n\nblue_marb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"🔵\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Getting the white circle emoji\nwhite_marb <- emojis |> \n  filter(str_detect(name, \"white\"), \n         str_detect(name, \"circle\")) |> \n  pull(emoji)\n\nwhite_marb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"⚪\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  blue_marbs = 0:4,\n  white_marbs = 4 - blue_marbs\n) |> \n  rowwise() |> \n  mutate(\n    marbles = list(c(rep(blue_marb, blue_marbs), \n                     rep(white_marb, white_marbs)))\n  ) -> \n  marbles_emoji\n```\n:::\n\n::: {#tbl-marbles-emoji .cell tbl-cap='Representing marble compositions with emoji'}\n\n```{.r .cell-code}\nmarbles_emoji |> \n  gt()\n```\n\n::: {.cell-output-display}\n\\begin{longtable}{rrc}\n\\toprule\nblue\\_marbs & white\\_marbs & marbles \\\\ \n\\midrule\n0 & 4 & ⚪, ⚪, ⚪, ⚪ \\\\ \n1 & 3 & 🔵, ⚪, ⚪, ⚪ \\\\ \n2 & 2 & 🔵, 🔵, ⚪, ⚪ \\\\ \n3 & 1 & 🔵, 🔵, 🔵, ⚪ \\\\ \n4 & 0 & 🔵, 🔵, 🔵, 🔵 \\\\ \n\\bottomrule\n\\end{longtable}\n:::\n:::\n\n\nYes, this is it.\n\n### Rerunning the sampling\n\nI'll re-run the sampling from [the previous post](../2023-05-09_02-small-large-worlds/index.qmd).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampling_df <- function(marbles, \n                        n = 1000, \n                        size = 3, \n                        pattern = c(blue_marb, white_marb, blue_marb)){\n  sampling_tibble <- tibble(samp = 1:n)   \n  sampling_tibble |> \n    mutate(\n      chosen = map(samp, \n                   ~sample(marbles, \n                           size = 3, \n                           replace = T)),\n      match = map_lgl(chosen, \n                      ~all(.x == pattern))                 \n    ) |> \n    summarise(prop_match = mean(match))->                         \n    sampling_tibble\n  return(sampling_tibble)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmarbles_emoji |> \n ungroup() |> \n  mutate(\n    prob = map(marbles, ~sampling_df(.x, n = 10000))\n  ) |> \n  unnest(prob) |> \n  mutate(norm_probs = prop_match/sum(prop_match))->\n  marble_probs\n```\n:::\n\n\nI want to label the column of probabilities with the key sequence.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkey_seq <- str_glue(\"{blue_marb}, {white_marb}, {blue_marb}\")\n```\n:::\n\n\n`gtExtras::gt_plt_bar_pct()` will plot a bar chart within the table.\n\n\n::: {#tbl-upate1 .cell tbl-cap='Probability of each marble composition given (🔵, ⚪️, 🔵) samples with replacement.'}\n\n```{.r .cell-code}\nmarble_probs |> \n  select(marbles, norm_probs) |> \n  mutate(norm_probs = norm_probs * 100) |> \n  gt() |> \n  cols_label(\n    norm_probs = str_glue(\"p(marbles | {key_seq})\")\n  ) |> \n  gt_plt_bar_pct(norm_probs, \n                 scaled = T, \n                 fill = \"steelblue\")\n```\n\n::: {.cell-output-display}\n\\begin{longtable}{cl}\n\\toprule\nmarbles & p(marbles | 🔵, ⚪, 🔵) \\\\ \n\\midrule\n⚪, ⚪, ⚪, ⚪ & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:0%;height:16px;'></div></div> \\\\ \n🔵, ⚪, ⚪, ⚪ & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:14.9532710280374%;height:16px;'></div></div> \\\\ \n🔵, 🔵, ⚪, ⚪ & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:39.8968739929101%;height:16px;'></div></div> \\\\ \n🔵, 🔵, 🔵, ⚪ & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:45.1498549790525%;height:16px;'></div></div> \\\\ \n🔵, 🔵, 🔵, 🔵 & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:0%;height:16px;'></div></div> \\\\ \n\\bottomrule\n\\end{longtable}\n:::\n:::\n\n\nThere we go!\n\n### With the Bayesian Update\n\n\n::: {#tbl-upate2 .cell tbl-cap='Probability of each marble composition given an additional (🔵) sample'}\n\n```{.r .cell-code}\nmarble_probs |> \n  mutate(new_prob = blue_marbs/sum(blue_marbs),\n         multiplied = norm_probs * new_prob,\n         norm_new = multiplied/sum(multiplied)) |> \n  select(marbles, norm_probs, norm_new) |> \n  mutate(norm_probs = norm_probs * 100,\n         norm_new = norm_new * 100) |> \n  gt() |> \n  cols_label(\n    norm_probs = str_glue(\"p(marbles | {key_seq})\"),\n    norm_new = str_glue(\"after {blue_marb}\")\n  ) |> \n  gt_plt_bar_pct(norm_probs, \n                 scaled = T, \n                 fill = \"steelblue\") |> \n  gt_plt_bar_pct(norm_new, \n                 scaled = T, \n                 fill = \"steelblue\") |> \n  ## Necessary to get the percent bars\n  ## to be equal length.\n  cols_width(2 ~ px(200),\n             3 ~ px(200))\n```\n\n::: {.cell-output-display}\n\\begin{longtable}{cll}\n\\toprule\nmarbles & p(marbles | 🔵, ⚪, 🔵) & after 🔵 \\\\ \n\\midrule\n⚪, ⚪, ⚪, ⚪ & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:0%;height:16px;'></div></div> & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:0%;height:16px;'></div></div> \\\\ \n🔵, ⚪, ⚪, ⚪ & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:14.9532710280374%;height:16px;'></div></div> & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:6.49587008259835%;height:16px;'></div></div> \\\\ \n🔵, 🔵, ⚪, ⚪ & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:39.8968739929101%;height:16px;'></div></div> & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:34.6633067338653%;height:16px;'></div></div> \\\\ \n🔵, 🔵, 🔵, ⚪ & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:45.1498549790525%;height:16px;'></div></div> & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:58.8408231835363%;height:16px;'></div></div> \\\\ \n🔵, 🔵, 🔵, 🔵 & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:0%;height:16px;'></div></div> & <div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:steelblue;width:0%;height:16px;'></div></div> \\\\ \n\\bottomrule\n\\end{longtable}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "\\usepackage{booktabs}\n\\usepackage{caption}\n\\usepackage{longtable}\n"
      ]
    },
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}