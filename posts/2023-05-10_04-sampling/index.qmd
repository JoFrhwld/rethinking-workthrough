---
title: "Starting Sampling"
draft: true
---

::: callout-note
## Listening

<iframe style="border-radius:12px" src="https://open.spotify.com/embed/track/4ECNtOnqzxutZkXP4TE3n3?utm_source=generator" width="100%" height="152" frameBorder="0" allowfullscreen allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy">

</iframe>
:::

```{r}
library(tidyverse)
library(patchwork)
library(here)
library(gt)
source(here("_defaults.R"))
```

## Classic Base Rate Issues

```{mermaid}
flowchart TD
  p["population<br>10,000 individuals"] --> |0.01| v["Vampire<br>100 individuals"]
  p--> |0.99| h["Human<br>9,900 individuals"]
  
  v --> |0.95| vpos["Test Positive<br>95 individuals"]
  v --> |0.05| vneg["Test Negative<br>5 individuals"]
  
  h --> |0.01| hpos["Test Positive<br>99 individuals"]
  h --> |0.99| hneg["Test Negative<br>9,801 individuals"]
  
  vpos --o pos["Positive individuals<br>194"]
  hpos --o pos
  
  vneg --o neg["Negative individuals<br>9806"]
  hneg --o neg
```

Plot of the base rate vs P(vampire \| positive test)

```{r}
tibble(
  # might as well get logarithmic
  base_rate = 10^(seq(-3, -1, length = 20)),
  vamp_and_pos = base_rate * 0.95,
  vamp_and_neg = base_rate * 0.05,
  human_and_pos = (1-base_rate) * 0.01,
  human_and_neg = (1-base_rate) * 0.99,
  p_vamp_pos = vamp_and_pos/(vamp_and_pos + human_and_pos), 
  p_hum_neg = human_and_neg/(vamp_and_neg + human_and_neg)
) -> test_metrics
```

```{r}
#| label: fig-ppv
#| fig-cap: "Probability someone *is* a vampire, given that they tested positive, relative to the base rate of being a vampire"
test_metrics |> 
  ggplot(aes(base_rate, p_vamp_pos))+
    geom_point(color = "steelblue", 
               size = 3)+
    geom_line(color = "steelblue",
              linewidth = 1)+
    scale_x_log10()+
    ylim(0,1)+
    labs(x = "P(vampire)",
         y = "P(vampire | positive)",
         subtitle = "P(positive | vampire) = 0.95\nP(positive | human) = 0.01",
         title = "Positive Predictive Value") +
    theme(plot.subtitle = element_text(size = 12))
```

```{r}
#| label: fig-npv
#| fig-cap: "Probability of being a human given a negative test, relative to the base rate of being a vampire."
test_metrics |> 
  ggplot(aes(base_rate, p_hum_neg))+
    geom_point(color = "steelblue", 
               size = 3)+
    geom_line(color = "steelblue",
              linewidth = 1)+
    scale_x_log10()+
    labs(x = "P(vampire)",
         y = "P(human | negative)",
         subtitle = "P(positive | vampire) = 0.95\nP(positive | human) = 0.01",
         title = "Negative Predictive Value") +
    theme(plot.subtitle = element_text(size = 12))
```

## Tibble grid sampling

```{r}
grid <- tibble(
  prob = seq(0.0001, 0.9999, length = 5000), 
  prior_unstd = case_when(
    prob < 0.5 ~ 0,
    .default = 1
  ),
  prior_std = prior_unstd/sum(prior_unstd),
  data = dbinom(6, size = 9, prob = prob),
  posterior_unstd = prior_std * data,
  posterior = posterior_unstd / sum(posterior_unstd)
)
```

```{r}
#| label: fig-posterior1
#| fig-cap: "Prior, Data, Posterior"
#| fig-width: 10
grid |> 
  ggplot(aes(prob, prior_std))+
    geom_line()+
    labs(y = "prior density",
         title = "Prior") -> 
  prior_plot

grid |> 
  ggplot(aes(prob, data))+
    geom_line()+
    labs(y = "data density",
         title = "Data") -> 
  data_plot

grid |> 
  ggplot(aes(prob, posterior))+
    geom_line() +
    labs(y = "posterior density",
         title = "Posterior") -> 
  posterior_plot

prior_plot | data_plot | posterior_plot
```

Sampling from the posterior

```{r}
grid |> 
  sample_n(size = 1e4, 
           replace = T,
           weight = posterior)->
  posterior_samples
```

```{r}
#| eval: false
renv::install("tidybayes")
```

```{r}
library(tidybayes)
```

```{r}
posterior_samples |> 
  ggplot(aes(prob))+
    stat_halfeye(point_interval = median_hdci)+
    geom_line(aes(y = posterior/max(posterior)),
              linetype = 2)+
    xlim(0,1)+
    theme(
      axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      panel.grid.major.y = element_blank()
    )
```

```{r}
posterior_samples |> 
  median_hdci(prob, .width = c(0.5, 0.95)) |> 
  gt() |> 
  fmt_number(decimals = 2)
```

## BRMS

```{r}
library(brms)
```

```{r}
tibble(
  water = 6,
  samples = 9
)-> 
  water_to_model
```

```{r}
water_form <- bf(
   water | trials(samples) ~ 1,
   family = binomial(link = "identity")
)
```

```{r}
brm(
  water | trials(samples) ~ 1,
  data = water_to_model,
  family = binomial(link = "identity"),
  prior(beta(1, 1), class = Intercept, ub = 1, lb = 0),
  file_refit = "on_change",
  file = "water_fit.rds"
) ->
  water_model
```

```{r}
water_model
```

```{r}
library(gtsummary)
```

```{r}
water_model |> 
  gtsummary::tbl_regression(intercept = T)
```

::: {.content-visible when-format="html"}
```{r}
water_model |> 
  spread_draws(b_Intercept) |> 
  summarise(Intercept = list(b_Intercept)) |> 
  gt() |> 
  gtExtras::gt_plt_dist(Intercept)
```
:::

::: {.content-visible when-format="pdf"}
```{r}
#| eval: false
fs::dir_create("tables")
```

```{r}
water_model |> 
  spread_draws(b_Intercept) |> 
  summarise(Intercept = list(b_Intercept)) |> 
  gt() |> 
  gtExtras::gt_plt_dist(Intercept)  -> modtable

modtable |> 
  gtsave("tables/model.png")
```
:::
