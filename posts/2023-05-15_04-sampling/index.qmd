---
title: "Starting Sampling"
draft: false
date: 2023-10-15
---

::: callout-note
## Listening

<iframe style="border-radius:12px" src="https://open.spotify.com/embed/track/4ECNtOnqzxutZkXP4TE3n3?utm_source=generator" width="100%" height="152" frameBorder="0" allowfullscreen allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy">

</iframe>
:::

```{r}
library(tidyverse)
library(broom)
library(patchwork)
library(here)
library(gt)
source(here("_defaults.R"))
```

## Classic Base Rate Issues

```{mermaid}
flowchart TD
  p["population<br>10,000 individuals"] --> |0.01| v["🧛‍♂️<br>100 individuals"]
  p--> |0.99| h["👨<br>9,900 individuals"]
  
  v --> |0.95| vpos["🧛‍♂️➕<br>95 individuals"]
  v --> |0.05| vneg["🧛‍♂️➖Test Negative<br>5 individuals"]
  
  h --> |0.01| hpos["👨➕<br>99 individuals"]
  h --> |0.99| hneg["👨➖Test Negative<br>9,801 individuals"]
  
  vpos --o pos["(🧛‍♂️,👨)➕<br>194"]
  hpos --o pos
  
  vneg --o neg["(🧛‍♂️, 👨)➖<br>9806"]
  hneg --o neg
```

Plot of the base rate vs P(vampire \| positive test)

```{r}
tibble(
  # might as well get logarithmic
  base_rate = 10^(seq(-3, -1, length = 20)),
  vamp_and_pos = base_rate * 0.95,
  vamp_and_neg = base_rate * 0.05,
  human_and_pos = (1-base_rate) * 0.01,
  human_and_neg = (1-base_rate) * 0.99,
  p_vamp_pos = vamp_and_pos/(vamp_and_pos + human_and_pos), 
  p_hum_neg = human_and_neg/(vamp_and_neg + human_and_neg)
) -> test_metrics
```

```{r}
#| label: fig-ppv
#| fig-cap: "Probability someone *is* a vampire, given that they tested positive, relative to the base rate of being a vampire"
test_metrics |> 
  ggplot(aes(base_rate, p_vamp_pos))+
    geom_point(color = "steelblue", 
               size = 3)+
    geom_line(color = "steelblue",
              linewidth = 1)+
    scale_x_log10()+
    ylim(0,1)+
    labs(x = "P(vampire)",
         y = "P(vampire | positive)",
         subtitle = "P(positive | vampire) = 0.95\nP(positive | human) = 0.01",
         title = "Positive Predictive Value") +
    theme(plot.subtitle = element_text(size = 12))
```

```{r}
#| label: fig-npv
#| fig-cap: "Probability of being a human given a negative test, relative to the base rate of being a vampire."
test_metrics |> 
  ggplot(aes(base_rate, p_hum_neg))+
    geom_point(color = "steelblue", 
               size = 3)+
    geom_line(color = "steelblue",
              linewidth = 1)+
    scale_x_log10()+
    labs(x = "P(vampire)",
         y = "P(human | negative)",
         subtitle = "P(positive | vampire) = 0.95\nP(positive | human) = 0.01",
         title = "Negative Predictive Value") +
    theme(plot.subtitle = element_text(size = 12))
```

## Tibble grid sampling

Estimating posterior density from grid sampling.

```{r}
grid <- tibble(
  # The grid
  prob = seq(0.0001, 0.9999, length = 5000), 
  
  # the prior
  prior_unstd = exp(-abs(prob - .5) / .25),
  prior_std = prior_unstd/sum(prior_unstd),
  
  # the data
  data = dbinom(6, size = 9, prob = prob),
  
  # the posterior
  posterior_unstd = prior_std * data,
  posterior = posterior_unstd / sum(posterior_unstd)
)
```

```{r}
#| label: fig-posterior1
#| fig-cap: "Prior, Data, Posterior"
#| fig-width: 10
grid |> 
  ggplot(aes(prob, prior_std))+
    geom_line()+
    labs(y = "prior density",
         title = "Prior") -> 
  prior_plot

grid |> 
  ggplot(aes(prob, data))+
    geom_line()+
    labs(y = "data density",
         title = "Data") -> 
  data_plot

grid |> 
  ggplot(aes(prob, posterior))+
    geom_line() +
    labs(y = "posterior density",
         title = "Posterior") -> 
  posterior_plot

prior_plot | data_plot | posterior_plot
```

Sampling from the posterior, using `sample_n()`.

```{r}
grid |> 
  sample_n(size = 1e4, 
           replace = T,
           weight = posterior)->
  posterior_samples
```

```{r}
head(posterior_samples)
```

I'm going to mess around with finessing the visualizations here.

```{r}
#| eval: false
renv::install("tidybayes")
```

```{r}
library(tidybayes)
```

```{r}
#| label: fig-dens-grid
#| fig-cap: "Comparison of the kernel density estimate vs the actual posterior distribution."
posterior_samples |> 
  pull(prob) |> 
  density() |> 
  tidy() |> 
  rename(prob = x, density = y) ->
  posterior_dens

posterior_dens |> 
  ggplot(aes(prob, density/max(density)))+
    geom_area(fill = "grey60")+
    geom_line(aes(y = posterior/max(posterior)),
              linetype = 2,
              data = grid)+
    theme(
      axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      panel.grid.major.y = element_blank()
    )
```

```{r}
posterior_samples |> 
  median_hdci(prob, .width = c(0.5, 0.95)) ->
  intervals
intervals |> 
  gt() |> 
  fmt_number(decimals = 2)
```

```{r}
#| label: fig-pdf
#| fig-cap: "Posterior density, colored according to the probability density function."
#| fig-width: 8
posterior_samples |> 
  ggplot(aes(prob))+
    stat_slab(aes(fill = after_stat(pdf)), 
              fill_type = "gradient")+
    scale_y_continuous(expand = expansion(mult = c(0,0)))+
    khroma::scale_fill_batlow() +
    theme(
      axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      panel.grid.major.y = element_blank()
    )
```

```{r}
#| label: fig-cutoff
#| fig-cap: "The posterior density colored according to a critical value (0.5)"
#| fig-width: 8
posterior_samples |> 
  ggplot(aes(prob))+
    stat_slab(
      aes(fill = after_stat(x >= 0.5)),
      fill_type = "gradient"
    ) +
    scale_fill_manual(
      values = c(
        "grey70",
        "steelblue"
      )
    )+
   scale_y_continuous(expand = expansion(mult = c(0,0)))+
   theme(
      axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      panel.grid.major.y = element_blank()
    )
```

```{r}
#| label: fig-hdi
#| fig-cap: "Posterior samples, colored by their highest density interval levels."
posterior_samples |> 
  ggplot(aes(prob))+
    stat_halfeye(
      aes(fill = after_stat(level)),
      fill_type = "gradient",
      point_interval = "median_hdi"
    ) +
   scale_y_continuous(expand = expansion(mult = c(0.05,0)))+
   scale_fill_manual(
     values = c("steelblue", "steelblue4")
   )+
   theme(
      axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      panel.grid.major.y = element_blank()
    )
```

Can I get the plot into a `{gt}` table? I thin I'll need to map over the widths? I'm going off of this gt help page: https://gt.rstudio.com/reference/ggplot_image.html. Let me get the plot right first.

```{r}
#| label: fig-slab-exp
#| fig-cap: "Table figure experimentation"
posterior_samples |> 
  ggplot(aes(prob))+
    stat_slab(
      aes(fill = after_stat(level)),
      .width = 0.66,
      fill_type = "gradient",
      point_interval = "median_hdci"
    ) +
    stat_slab(
      fill = NA,
      color = "black"
    )+
    scale_x_continuous(
      limits = c(0,1),
      expand = expansion(mult = c(0,0))
    )+
    scale_y_continuous(
      expand = expansion(mult = c(0,0))
    )+
    scale_fill_manual(values = "steelblue", 
                      guide = "none")+
    theme_void()
```

```{r}
make_table_plot <- function(.width, data) {
  ggplot(data, aes(prob))+
    stat_slab(
      aes(fill = after_stat(level)),
      .width = .width,
      point_interval = "median_hdci"
    ) +
    stat_slab(
      fill = NA,
      color = "black"
    )+
    scale_x_continuous(
      limits = c(0,1),
      expand = expansion(mult = c(0,0))
    )+
    scale_y_continuous(
      expand = expansion(mult = c(0,0))
    )+
    scale_fill_manual(values = "steelblue", 
                      guide = "none")+
    theme_void()
}
```

Map that function over the `intervals` table I made before.

```{r}
intervals |> 
  mutate(
    ggplot = map(.width, ~make_table_plot(.x, posterior_samples)),
    
    ## adding an empty column
    dist = NA
  ) -> to_tibble

to_tibble |> 
  select(-ggplot) |> 
  gt() |> 
  text_transform(
    locations = cells_body(columns = dist),
    fn = \(x) map(to_tibble$ggplot, ggplot_image, aspect_ratio = 2)
  )
  
```

I'd like more control over how the image appears in the table. Looks like I'll have to ggsave, and then embed.

```{r}
make_custom_table_plot <- function(p){
  filename <- tempfile(fileext = ".png")
  ggsave(plot = p, 
         filename = filename, 
         device = ragg::agg_png, 
         res = 100, 
         width =1.5,
         height = 0.75)
  local_image(filename=filename)
}
```

```{r}
to_tibble |> 
  select(-ggplot) |> 
  gt() |> 
  text_transform(
    locations = cells_body(columns = vars(dist)),
    fn = \(x) map(to_tibble$ggplot, make_custom_table_plot)
  )
```

There we go!

Turns out this `local_image()` thing doesn't play nice with conversion to pdf (😕).

## BRMS

```{r}
library(brms)
```

```{r}
tibble(
  water = 6,
  samples = 9
)-> 
  water_to_model
```

```{r}
water_form <- bf(
   water | trials(samples) ~ 1,
   family = binomial(link = "identity")
)
```

```{r}
brm(
  water | trials(samples) ~ 1,
  data = water_to_model,
  family = binomial(link = "identity"),
  prior(beta(1, 1), class = Intercept, ub = 1, lb = 0),
  file_refit = "on_change",
  file = "water_fit.rds"
) ->
  water_model
```

```{r}
water_model
```

```{r}
library(gtsummary)
```

```{r}
water_model |> 
  gtsummary::tbl_regression(intercept = T)
```

Let's do this again.

```{r}
water_model |> 
  get_variables()
```

```{r}
water_model |> 
  gather_draws(b_Intercept)->
  model_draws

model_draws |> 
  head() |> 
  rmarkdown::paged_table()
```

```{r}
model_draws |> 
  ggplot(aes(.value, .variable)) + 
    stat_halfeye(
      point_interval = median_hdi,
      aes(fill = after_stat(level)),
      fill_type = "gradient"
    ) +
    xlim(0,1)+
    scale_fill_manual(
      values = c("steelblue4", "steelblue"),
    )
```
